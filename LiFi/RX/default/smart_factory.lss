
smart_factory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000004f6  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800092  00800092  000005bc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c9  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b41  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d6  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a09  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00002dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ae1  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00003a5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
void LCD_cmd(unsigned char cmd);// Function to send command to th LCD
void LCD_write(unsigned char data);// Function to display character on LCD

void usart_init(void)
{
	UCSRB |= (1 << RXEN) | (1 << RXCIE) | ( 1<<TXEN );// Turn on the transmission and reception 
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 69       	ori	r24, 0x98	; 152
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ( 1<<UCSZ1 ) | ( 1<<UCSZ0 ) | ( 1<<URSEL );
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0X0C; //  FOR 2000000MHZ   9600 br
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	89 b9       	out	0x09, r24	; 9
}
  a0:	08 95       	ret

000000a2 <usart_send>:


void usart_send(unsigned char data)
{

	while(! (UCSRA & (1<<UDRE)));
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
	UDR = data;
  a6:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	84 ec       	ldi	r24, 0xC4	; 196
  aa:	99 e0       	ldi	r25, 0x09	; 9
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <usart_send+0xa>
	_delay_ms(5);
}
  b0:	08 95       	ret

000000b2 <usart_SendString>:

void usart_SendString(char *str)
{
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	60 e1       	ldi	r22, 0x10	; 16
  b6:	77 e2       	ldi	r23, 0x27	; 39


void usart_send(unsigned char data)
{

	while(! (UCSRA & (1<<UDRE)));
  b8:	44 ec       	ldi	r20, 0xC4	; 196
  ba:	59 e0       	ldi	r21, 0x09	; 9
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <usart_SendString+0x20>
  be:	db 01       	movw	r26, r22
  c0:	11 97       	sbiw	r26, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <usart_SendString+0xe>
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <usart_SendString+0x12>
	UDR = data;
  c8:	ec b9       	out	0x0c, r30	; 12
  ca:	fa 01       	movw	r30, r20
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <usart_SendString+0x1a>
	
	while (str[j]!=0)		/* Send string till null */
	{
		_delay_ms(20);
		usart_send(str[j]);
		j++;
  d0:	2f 5f       	subi	r18, 0xFF	; 255

void usart_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
  d2:	fc 01       	movw	r30, r24
  d4:	e2 0f       	add	r30, r18
  d6:	f1 1d       	adc	r31, r1
  d8:	e0 81       	ld	r30, Z
  da:	ee 23       	and	r30, r30
  dc:	81 f7       	brne	.-32     	; 0xbe <usart_SendString+0xc>
	{
		_delay_ms(20);
		usart_send(str[j]);
		j++;
	}
}
  de:	08 95       	ret

000000e0 <LCD_cmd>:
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
  e0:	88 bb       	out	0x18, r24	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	88 e8       	ldi	r24, 0x88	; 136
  e8:	93 e1       	ldi	r25, 0x13	; 19
  ea:	fc 01       	movw	r30, r24
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_cmd+0xc>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
  f0:	1b ba       	out	0x1b, r1	; 27
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_cmd+0x12>
_delay_ms(10);
return;
}
  f6:	08 95       	ret

000000f8 <LCD_write>:
 
void LCD_write(unsigned char data)
{
LCD_DATA= data;
  f8:	88 bb       	out	0x18, r24	; 24
Control_PORT = (1<<RS)|(0<<RW)|(1<<En);	// RW as LOW and RS, EN as HIGH
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	28 e8       	ldi	r18, 0x88	; 136
 100:	33 e1       	ldi	r19, 0x13	; 19
 102:	c9 01       	movw	r24, r18
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_write+0xc>
_delay_ms(10);
Control_PORT = (1<<RS)|(0<<RW)|(0<<En);	// EN and RW as LOW and RS HIGH
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	c9 01       	movw	r24, r18
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_write+0x16>
_delay_ms(10);	// delay to get things executed
return ;
}
 112:	08 95       	ret

00000114 <init_LCD>:
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	88 bb       	out	0x18, r24	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 118:	30 e8       	ldi	r19, 0x80	; 128
 11a:	3b bb       	out	0x1b, r19	; 27
 11c:	88 e8       	ldi	r24, 0x88	; 136
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	fc 01       	movw	r30, r24
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init_LCD+0xe>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 126:	1b ba       	out	0x1b, r1	; 27
 128:	fc 01       	movw	r30, r24
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init_LCD+0x16>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 12e:	fc 01       	movw	r30, r24
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <init_LCD+0x1c>
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	28 bb       	out	0x18, r18	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 138:	3b bb       	out	0x1b, r19	; 27
 13a:	fc 01       	movw	r30, r24
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <init_LCD+0x28>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 140:	1b ba       	out	0x1b, r1	; 27
 142:	fc 01       	movw	r30, r24
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <init_LCD+0x30>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 148:	fc 01       	movw	r30, r24
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <init_LCD+0x36>
 14e:	2c e0       	ldi	r18, 0x0C	; 12
 150:	28 bb       	out	0x18, r18	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 152:	3b bb       	out	0x1b, r19	; 27
 154:	fc 01       	movw	r30, r24
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <init_LCD+0x42>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 15a:	1b ba       	out	0x1b, r1	; 27
 15c:	fc 01       	movw	r30, r24
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <init_LCD+0x4a>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 162:	fc 01       	movw	r30, r24
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <init_LCD+0x50>
 168:	38 bb       	out	0x18, r19	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 16a:	3b bb       	out	0x1b, r19	; 27
 16c:	fc 01       	movw	r30, r24
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <init_LCD+0x5a>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 172:	1b ba       	out	0x1b, r1	; 27
 174:	fc 01       	movw	r30, r24
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <init_LCD+0x62>
LCD_cmd(0X0C);
_delay_ms(10);
LCD_cmd(0X80);
_delay_ms(10);

}
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <init_LCD+0x66>
 17e:	08 95       	ret

00000180 <LCD_write_string>:
 
void LCD_write_string(unsigned char *str) //take address vaue of the string in pionter *str
{
 180:	fc 01       	movw	r30, r24
}
 
void LCD_write(unsigned char data)
{
LCD_DATA= data;
Control_PORT = (1<<RS)|(0<<RW)|(1<<En);	// RW as LOW and RS, EN as HIGH
 182:	50 ea       	ldi	r21, 0xA0	; 160
 184:	28 e8       	ldi	r18, 0x88	; 136
 186:	33 e1       	ldi	r19, 0x13	; 19
_delay_ms(10);
Control_PORT = (1<<RS)|(0<<RW)|(0<<En);	// EN and RW as LOW and RS HIGH
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	09 c0       	rjmp	.+18     	; 0x19e <LCD_write_string+0x1e>
return;
}
 
void LCD_write(unsigned char data)
{
LCD_DATA= data;
 18c:	88 bb       	out	0x18, r24	; 24
Control_PORT = (1<<RS)|(0<<RW)|(1<<En);	// RW as LOW and RS, EN as HIGH
 18e:	5b bb       	out	0x1b, r21	; 27
 190:	c9 01       	movw	r24, r18
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_write_string+0x12>
_delay_ms(10);
Control_PORT = (1<<RS)|(0<<RW)|(0<<En);	// EN and RW as LOW and RS HIGH
 196:	4b bb       	out	0x1b, r20	; 27
 198:	c9 01       	movw	r24, r18
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_write_string+0x1a>
}
 
void LCD_write_string(unsigned char *str) //take address vaue of the string in pionter *str
{
int i=0;
while(str[i]!='\0') // loop will go on till the NULL charaters is soon in string 
 19e:	81 91       	ld	r24, Z+
 1a0:	88 23       	and	r24, r24
 1a2:	a1 f7       	brne	.-24     	; 0x18c <LCD_write_string+0xc>
{
LCD_write(str[i]); // sending data on CD byte by byte
i++;
}
return;
}
 1a4:	08 95       	ret

000001a6 <main>:

unsigned char a=0,b=0,x,y,z;
int cor,n;

int main(void)
{
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	
DDRA=0xf0;
 1ba:	80 ef       	ldi	r24, 0xF0	; 240
 1bc:	8a bb       	out	0x1a, r24	; 26
DDRB=0xff;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	87 bb       	out	0x17, r24	; 23
DDRC=0X00;	
 1c2:	14 ba       	out	0x14, r1	; 20
DDRD=0xff;
 1c4:	81 bb       	out	0x11, r24	; 17


UCSRB = ( 1<<TXEN ) | ( 1<<RXEN ) ;
 1c6:	88 e1       	ldi	r24, 0x18	; 24
 1c8:	8a b9       	out	0x0a, r24	; 10
UCSRC = ( 1<<UCSZ1 ) | ( 1<<UCSZ0 ) | ( 1<<URSEL );
 1ca:	86 e8       	ldi	r24, 0x86	; 134
 1cc:	80 bd       	out	0x20, r24	; 32
UBRRL = 0X0C; //9600 br
 1ce:	4c e0       	ldi	r20, 0x0C	; 12
 1d0:	49 b9       	out	0x09, r20	; 9
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 1d2:	88 e3       	ldi	r24, 0x38	; 56
 1d4:	88 bb       	out	0x18, r24	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 1d6:	30 e8       	ldi	r19, 0x80	; 128
 1d8:	3b bb       	out	0x1b, r19	; 27
 1da:	88 e8       	ldi	r24, 0x88	; 136
 1dc:	93 e1       	ldi	r25, 0x13	; 19
 1de:	fc 01       	movw	r30, r24
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x3a>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 1e4:	1b ba       	out	0x1b, r1	; 27
 1e6:	fc 01       	movw	r30, r24
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x42>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 1ec:	fc 01       	movw	r30, r24
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x48>
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	28 bb       	out	0x18, r18	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 1f6:	3b bb       	out	0x1b, r19	; 27
 1f8:	fc 01       	movw	r30, r24
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x54>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 1fe:	1b ba       	out	0x1b, r1	; 27
 200:	fc 01       	movw	r30, r24
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x5c>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 206:	fc 01       	movw	r30, r24
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x62>
 20c:	48 bb       	out	0x18, r20	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 20e:	3b bb       	out	0x1b, r19	; 27
 210:	fc 01       	movw	r30, r24
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x6c>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 216:	1b ba       	out	0x1b, r1	; 27
 218:	fc 01       	movw	r30, r24
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x74>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 21e:	fc 01       	movw	r30, r24
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x7a>
 224:	38 bb       	out	0x18, r19	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 226:	3b bb       	out	0x1b, r19	; 27
 228:	fc 01       	movw	r30, r24
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x84>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 22e:	1b ba       	out	0x1b, r1	; 27
 230:	fc 01       	movw	r30, r24
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x8c>
_delay_ms(10);
LCD_cmd(0X80);
_delay_ms(10);


LCD_write_string("LiFi Receiver");
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x90>
 23a:	80 e6       	ldi	r24, 0x60	; 96
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_string>
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	9e e4       	ldi	r25, 0x4E	; 78
 246:	22 e3       	ldi	r18, 0x32	; 50
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 250:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 252:	d9 f7       	brne	.-10     	; 0x24a <main+0xa4>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 254:	88 e3       	ldi	r24, 0x38	; 56
 256:	88 bb       	out	0x18, r24	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 258:	30 e8       	ldi	r19, 0x80	; 128
 25a:	3b bb       	out	0x1b, r19	; 27
 25c:	88 e8       	ldi	r24, 0x88	; 136
 25e:	93 e1       	ldi	r25, 0x13	; 19
 260:	fc 01       	movw	r30, r24
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0xbc>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 266:	1b ba       	out	0x1b, r1	; 27
 268:	fc 01       	movw	r30, r24
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0xc4>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 26e:	fc 01       	movw	r30, r24
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0xca>
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	28 bb       	out	0x18, r18	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 278:	3b bb       	out	0x1b, r19	; 27
 27a:	fc 01       	movw	r30, r24
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0xd6>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 280:	1b ba       	out	0x1b, r1	; 27
 282:	fc 01       	movw	r30, r24
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0xde>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 288:	fc 01       	movw	r30, r24
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0xe4>
 28e:	2c e0       	ldi	r18, 0x0C	; 12
 290:	28 bb       	out	0x18, r18	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 292:	3b bb       	out	0x1b, r19	; 27
 294:	fc 01       	movw	r30, r24
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0xf0>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 29a:	1b ba       	out	0x1b, r1	; 27
 29c:	fc 01       	movw	r30, r24
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0xf8>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 2a2:	fc 01       	movw	r30, r24
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0xfe>
 2a8:	38 bb       	out	0x18, r19	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 2aa:	3b bb       	out	0x1b, r19	; 27
 2ac:	fc 01       	movw	r30, r24
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x108>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 2b2:	1b ba       	out	0x1b, r1	; 27
 2b4:	fc 01       	movw	r30, r24
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x110>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x114>
 2be:	38 e3       	ldi	r19, 0x38	; 56
 2c0:	c3 2e       	mov	r12, r19
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 2c2:	10 e8       	ldi	r17, 0x80	; 128
 2c4:	c8 e8       	ldi	r28, 0x88	; 136
 2c6:	d3 e1       	ldi	r29, 0x13	; 19
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 2c8:	dd 24       	eor	r13, r13
 2ca:	d3 94       	inc	r13
 2cc:	0c e0       	ldi	r16, 0x0C	; 12
 2ce:	22 e3       	ldi	r18, 0x32	; 50
 2d0:	e2 2e       	mov	r14, r18
 2d2:	f1 2c       	mov	r15, r1
}
 
void LCD_write(unsigned char data)
{
LCD_DATA= data;
Control_PORT = (1<<RS)|(0<<RW)|(1<<En);	// RW as LOW and RS, EN as HIGH
 2d4:	90 ea       	ldi	r25, 0xA0	; 160
 2d6:	b9 2e       	mov	r11, r25
_delay_ms(10);
Control_PORT = (1<<RS)|(0<<RW)|(0<<En);	// EN and RW as LOW and RS HIGH
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	a8 2e       	mov	r10, r24
 2dc:	6d c0       	rjmp	.+218    	; 0x3b8 <main+0x212>

while(! (UCSRA & (1<<RXC)))

{

if( PINA & (1<<0))
 2de:	c8 99       	sbic	0x19, 0	; 25
 2e0:	6b c0       	rjmp	.+214    	; 0x3b8 <main+0x212>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 2e2:	c8 ba       	out	0x18, r12	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 2e4:	1b bb       	out	0x1b, r17	; 27
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x142>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 2ec:	1b ba       	out	0x1b, r1	; 27
 2ee:	ce 01       	movw	r24, r28
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0x14a>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x150>
 2fa:	d8 ba       	out	0x18, r13	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 2fc:	1b bb       	out	0x1b, r17	; 27
 2fe:	ce 01       	movw	r24, r28
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0x15a>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 304:	1b ba       	out	0x1b, r1	; 27
 306:	ce 01       	movw	r24, r28
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x162>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 30c:	ce 01       	movw	r24, r28
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0x168>
 312:	08 bb       	out	0x18, r16	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 314:	1b bb       	out	0x1b, r17	; 27
 316:	ce 01       	movw	r24, r28
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x172>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 31c:	1b ba       	out	0x1b, r1	; 27
 31e:	ce 01       	movw	r24, r28
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x17a>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 324:	ce 01       	movw	r24, r28
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x180>
 32a:	18 bb       	out	0x18, r17	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 32c:	1b bb       	out	0x1b, r17	; 27
 32e:	ce 01       	movw	r24, r28
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x18a>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 334:	1b ba       	out	0x1b, r1	; 27
 336:	ce 01       	movw	r24, r28
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x192>
_delay_ms(10);
LCD_cmd(0X80);
_delay_ms(10);


LCD_write_string("Align Transmiter");
 33c:	ce 01       	movw	r24, r28
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <main+0x198>
 342:	8e e6       	ldi	r24, 0x6E	; 110
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_string>
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	97 e2       	ldi	r25, 0x27	; 39
 34e:	f7 01       	movw	r30, r14
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 354:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 356:	d9 f7       	brne	.-10     	; 0x34e <main+0x1a8>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 358:	c8 ba       	out	0x18, r12	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 35a:	1b bb       	out	0x1b, r17	; 27
 35c:	ce 01       	movw	r24, r28
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x1b8>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 362:	1b ba       	out	0x1b, r1	; 27
 364:	ce 01       	movw	r24, r28
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x1c0>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 36a:	ce 01       	movw	r24, r28
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <main+0x1c6>
 370:	d8 ba       	out	0x18, r13	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 372:	1b bb       	out	0x1b, r17	; 27
 374:	ce 01       	movw	r24, r28
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0x1d0>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 37a:	1b ba       	out	0x1b, r1	; 27
 37c:	ce 01       	movw	r24, r28
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x1d8>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 382:	ce 01       	movw	r24, r28
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x1de>
 388:	08 bb       	out	0x18, r16	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 38a:	1b bb       	out	0x1b, r17	; 27
 38c:	ce 01       	movw	r24, r28
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <main+0x1e8>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 392:	1b ba       	out	0x1b, r1	; 27
 394:	ce 01       	movw	r24, r28
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0x1f0>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 39a:	ce 01       	movw	r24, r28
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x1f6>
 3a0:	18 bb       	out	0x18, r17	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 3a2:	1b bb       	out	0x1b, r17	; 27
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x200>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 3aa:	1b ba       	out	0x1b, r1	; 27
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x208>

while(1)

{

while(! (UCSRA & (1<<RXC)))
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x20e>
 3b8:	5f 9b       	sbis	0x0b, 7	; 11
 3ba:	91 cf       	rjmp	.-222    	; 0x2de <main+0x138>
}




cor = UDR ;
 3bc:	2c b1       	in	r18, 0x0c	; 12
 3be:	42 2f       	mov	r20, r18
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	50 93 99 00 	sts	0x0099, r21
 3c6:	40 93 98 00 	sts	0x0098, r20

if( PINA & (1<<0))
 3ca:	c8 9b       	sbis	0x19, 0	; 25
 3cc:	56 c0       	rjmp	.+172    	; 0x47a <__stack+0x1b>
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	97 e2       	ldi	r25, 0x27	; 39
 3d2:	f7 01       	movw	r30, r14
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x22e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3da:	d9 f7       	brne	.-10     	; 0x3d2 <main+0x22c>
return;
}
 
void LCD_write(unsigned char data)
{
LCD_DATA= data;
 3dc:	28 bb       	out	0x18, r18	; 24
Control_PORT = (1<<RS)|(0<<RW)|(1<<En);	// RW as LOW and RS, EN as HIGH
 3de:	bb ba       	out	0x1b, r11	; 27
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x23c>
_delay_ms(10);
Control_PORT = (1<<RS)|(0<<RW)|(0<<En);	// EN and RW as LOW and RS HIGH
 3e6:	ab ba       	out	0x1b, r10	; 27
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x244>
 3ee:	80 e1       	ldi	r24, 0x10	; 16
 3f0:	97 e2       	ldi	r25, 0x27	; 39
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f2:	f7 01       	movw	r30, r14
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <main+0x24e>
 3f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <main+0x24c>
_delay_ms(1000);
LCD_write(cor);
_delay_ms(1000);


if(cor == '#' )
 3fc:	43 32       	cpi	r20, 0x23	; 35
 3fe:	51 05       	cpc	r21, r1
 400:	d9 f6       	brne	.-74     	; 0x3b8 <main+0x212>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 402:	c8 ba       	out	0x18, r12	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 404:	1b bb       	out	0x1b, r17	; 27
 406:	ce 01       	movw	r24, r28
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <main+0x262>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 40c:	1b ba       	out	0x1b, r1	; 27
 40e:	ce 01       	movw	r24, r28
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <main+0x26a>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 414:	ce 01       	movw	r24, r28
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <main+0x270>
 41a:	d8 ba       	out	0x18, r13	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 41c:	1b bb       	out	0x1b, r17	; 27
 41e:	ce 01       	movw	r24, r28
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <main+0x27a>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 424:	1b ba       	out	0x1b, r1	; 27
 426:	ce 01       	movw	r24, r28
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <main+0x282>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 42c:	ce 01       	movw	r24, r28
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <main+0x288>
 432:	08 bb       	out	0x18, r16	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 434:	1b bb       	out	0x1b, r17	; 27
 436:	ce 01       	movw	r24, r28
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0x292>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 43c:	1b ba       	out	0x1b, r1	; 27
 43e:	ce 01       	movw	r24, r28
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <main+0x29a>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 444:	ce 01       	movw	r24, r28
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <main+0x2a0>
 44a:	18 bb       	out	0x18, r17	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 44c:	1b bb       	out	0x1b, r17	; 27
 44e:	ce 01       	movw	r24, r28
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <main+0x2aa>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 454:	1b ba       	out	0x1b, r1	; 27
 456:	ce 01       	movw	r24, r28
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <main+0x2b2>
_delay_ms(10);
LCD_cmd(0X80);
_delay_ms(10);


LCD_write_string("Enter New message");
 45c:	ce 01       	movw	r24, r28
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0x2b8>
 462:	8f e7       	ldi	r24, 0x7F	; 127
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_string>
 46a:	80 e2       	ldi	r24, 0x20	; 32
 46c:	9e e4       	ldi	r25, 0x4E	; 78
 46e:	f7 01       	movw	r30, r14
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__stack+0x11>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 474:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 476:	d9 f7       	brne	.-10     	; 0x46e <__stack+0xf>
 478:	6f cf       	rjmp	.-290    	; 0x358 <main+0x1b2>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 47a:	c8 ba       	out	0x18, r12	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 47c:	1b bb       	out	0x1b, r17	; 27
 47e:	ce 01       	movw	r24, r28
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 484:	1b ba       	out	0x1b, r1	; 27
 486:	ce 01       	movw	r24, r28
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__stack+0x29>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 48c:	ce 01       	movw	r24, r28
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__stack+0x2f>
 492:	d8 ba       	out	0x18, r13	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 494:	1b bb       	out	0x1b, r17	; 27
 496:	ce 01       	movw	r24, r28
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__stack+0x39>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 49c:	1b ba       	out	0x1b, r1	; 27
 49e:	ce 01       	movw	r24, r28
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__stack+0x41>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__stack+0x47>
 4aa:	08 bb       	out	0x18, r16	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 4ac:	1b bb       	out	0x1b, r17	; 27
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__stack+0x51>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 4b4:	1b ba       	out	0x1b, r1	; 27
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__stack+0x59>
unsigned int value;
float data;

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
 4bc:	ce 01       	movw	r24, r28
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <__stack+0x5f>
 4c2:	18 bb       	out	0x18, r17	; 24
Control_PORT =(0<<RS)|(0<<RW)|(1<<En);	// RS and RW as LOW and EN as HIGH
 4c4:	1b bb       	out	0x1b, r17	; 27
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__stack+0x69>
_delay_ms(10);
Control_PORT =(0<<RS)|(0<<RW)|(0<<En);	// RS, RW , LOW and EN as LOW
 4cc:	1b ba       	out	0x1b, r1	; 27
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__stack+0x71>
_delay_ms(10);
LCD_cmd(0X80);
_delay_ms(10);


LCD_write_string("Align Transmiter");
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__stack+0x77>
 4da:	8e e6       	ldi	r24, 0x6E	; 110
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_write_string>
 4e2:	80 e1       	ldi	r24, 0x10	; 16
 4e4:	97 e2       	ldi	r25, 0x27	; 39
 4e6:	f7 01       	movw	r30, r14
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <__stack+0x89>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ee:	d9 f7       	brne	.-10     	; 0x4e6 <__stack+0x87>
 4f0:	33 cf       	rjmp	.-410    	; 0x358 <main+0x1b2>

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
